// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

contract EdenToken is ERC20Upgradeable, AccessControlUpgradeable, UUPSUpgradeable, ReentrancyGuard {
    mapping(address => uint256) public lockdownEnd;
    mapping(address => uint8) public tierLevel; // 0=None, 1=Bronze, 2=Silver, 3=Gold
    mapping(address => uint8) public highestTierAchieved;
    mapping(address => mapping(uint8 => bool)) public hasClaimedReward;

    bytes32 public constant ADMIN_ROLE = keccak256("ADMIN_ROLE");
    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    bytes32 public constant LOCKER_ROLE = keccak256("LOCKER_ROLE");
    bytes32 public constant UPGRADER_ROLE = keccak256("UPGRADER_ROLE");

    string public constant VERSION = "1.0.0";
    uint256 public goldReserveGrams;

    event LockdownCancelled(address indexed user);
    event AccountLocked(address indexed user, uint256 duration);
    event GoldReserveUpdated(uint256 newReserveGrams);
    event TierAssigned(address indexed user, uint8 tier);
    event TokensDistributed(address indexed user, uint256 amount);
    event ChatroomReward(address indexed user, uint256 amount, string ideaHash);

    function initialize(string memory name, string memory symbol, uint256 initialSupply, address multiSigWallet) initializer public {
        __ERC20_init(name, symbol);
        __AccessControl_init();
        __UUPSUpgradeable_init();

        _setupRole(ADMIN_ROLE, multiSigWallet);
        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);
        _setRoleAdmin(MINTER_ROLE, ADMIN_ROLE);
        _setRoleAdmin(LOCKER_ROLE, ADMIN_ROLE);
        _setRoleAdmin(UPGRADER_ROLE, ADMIN_ROLE);

        _setupRole(MINTER_ROLE, multiSigWallet);
        _setupRole(LOCKER_ROLE, multiSigWallet);
        _setupRole(UPGRADER_ROLE, multiSigWallet);

        _mint(multiSigWallet, initialSupply);
    }

    function _authorizeUpgrade(address newImplementation) internal override onlyRole(UPGRADER_ROLE) {}

    // Assign tier
    function assignTier(address user) external onlyRole(ADMIN_ROLE) {
        uint256 balance = balanceOf(user);
        uint8 newTier;
        if (balance >= 5000 * 10**18) newTier = 3; // Gold
        else if (balance >= 1000 * 10**18) newTier = 2; // Silver
        else if (balance >= 100 * 10**18) newTier = 1; // Bronze
        else newTier = 0; // None

        if (newTier != tierLevel[user]) {
            tierLevel[user] = newTier;
            if (newTier > highestTierAchieved[user]) {
                highestTierAchieved[user] = newTier;
            }
            emit TierAssigned(user, newTier);
        }
    }

    // Distribute tier rewards (one-time)
    function distributeTokens(address user) external onlyRole(MINTER_ROLE) {
        uint8 highestTier = highestTierAchieved[user];
        require(highestTier > 0, "No tier achieved");

        uint8 tierToReward;
        for (uint8 i = highestTier; i > 0; i--) {
            if (!hasClaimedReward[user][i]) {
                tierToReward = i;
                break;
            }
        }
        require(tierToReward > 0, "All rewards claimed");

        uint256 amount;
        if (tierToReward == 3) amount = 1000 * 10**18; // Gold
        else if (tierToReward == 2) amount = 250 * 10**18; // Silver
        else if (tierToReward == 1) amount = 50 * 10**18; // Bronze

        hasClaimedReward[user][tierToReward] = true;
        _mint(user, amount);
        emit TokensDistributed(user, amount);
    }

    // Reward chatroom ideas (multi-sig calls)
    function rewardChatroomIdea(address user, uint256 baseAmount, string calldata ideaHash) external onlyRole(MINTER_ROLE) {
        require(baseAmount > 0, "Amount must be > 0");
        uint8 tier = tierLevel[user];
        uint256 bonus;
        if (tier == 3) bonus = 50 * 10**18; // Gold: +50 EDEN
        else if (tier == 2) bonus = 25 * 10**18; // Silver: +25 EDEN
        else if (tier == 1) bonus = 10 * 10**18; // Bronze: +10 EDEN

        uint256 totalAmount = baseAmount + bonus;
        _mint(user, totalAmount);
        emit ChatroomReward(user, totalAmount, ideaHash);
    }

    // Gold reserve update
    function updateGoldReserve(uint256 grams) external onlyRole(ADMIN_ROLE) {
        goldReserveGrams = grams;
        emit GoldReserveUpdated(grams);
    }

    function transfer(address to, uint256 amount) public nonReentrant override returns (bool) {
        require(lockdownEnd[msg.sender] <= block.timestamp, "Account is locked");
        _transfer(msg.sender, to, amount);
        return true;
    }

    function lockAccount(address userAddress, uint256 duration) public onlyRole(LOCKER_ROLE) returns (bool) {
        require(duration > 0, "Duration must be > 0");
        require(userAddress != address(0), "Invalid address");
        uint256 expiration = block.timestamp + duration;
        require(expiration < type(uint256).max, "Invalid duration");
        lockdownEnd[userAddress] = expiration;
        emit AccountLocked(userAddress, duration);
        return true;
    }

    function cancelLockdown(address user) public onlyRole(LOCKER_ROLE) returns (bool) {
        require(user != address(0), "Invalid address");
        delete lockdownEnd[user];
        emit LockdownCancelled(user);
        return true;
    }

    function mint(address account, uint256 amount) public onlyRole(MINTER_ROLE) returns (bool) {
        _mint(account, amount);
        return true;
    }

    function isLocked(address user) public view returns (bool) {
        return lockdownEnd[user] > block.timestamp;
    }

    function getLockEnd(address user) public view returns (uint256) {
        return lockdownEnd[user];
    }
}

