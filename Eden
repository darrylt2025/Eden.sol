// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

contract EdenToken is ERC20Upgradeable, AccessControlUpgradeable, UUPSUpgradeable, ReentrancyGuard {
    bytes32 public constant ADMIN_ROLE = keccak256("ADMIN_ROLE");
    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");

    uint256 public constant FACE_VALUE = 0.50 ether; // $0.50 in wei (assuming 18 decimals)
    uint256 public kennedyHalfDollarReserve; // Tracks coins in reserve
    uint256 public totalBurned; // Tracks burned tokens

    event TokensSold(address indexed buyer, uint256 amount, uint256 cost);
    event TokensBoughtBack(address indexed seller, uint256 amount, uint256 payout);
    event ReserveUpdated(uint256 newReserve);

    function initialize(address multiSigWallet) public initializer {
        __ERC20_init("EdenToken", "EDEN");
        __AccessControl_init();
        __UUPSUpgradeable_init();

        _setupRole(ADMIN_ROLE, multiSigWallet);
        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);
        _setRoleAdmin(MINTER_ROLE, ADMIN_ROLE);
        _setupRole(MINTER_ROLE, multiSigWallet);

        kennedyHalfDollarReserve = 200; // Initial 200 coins
        _mint(multiSigWallet, 200 * 10**18); // 200 tokens
    }

    function _authorizeUpgrade(address) internal override onlyRole(ADMIN_ROLE) {}

    // Buy tokens at $1.54 each
    function buyTokens(uint256 amount) external payable nonReentrant {
        require(amount <= balanceOf(address(this)), "Not enough tokens available");
        uint256 cost = amount * 154 / 100; // $1.54 per token (scaled for 18 decimals)
        require(msg.value >= cost, "Insufficient payment");

        _transfer(address(this), msg.sender, amount);
        emit TokensSold(msg.sender, amount, cost);

        // Excess ETH refunded
        if (msg.value > cost) {
            payable(msg.sender).transfer(msg.value - cost);
        }
    }

    // Sell back at $0.50 face value, burn tokens
    function sellBack(uint256 amount) external nonReentrant {
        require(balanceOf(msg.sender) >= amount, "Insufficient balance");
        uint256 payout = amount * FACE_VALUE / 10**18; // $0.50 per token
        require(address(this).balance >= payout, "Insufficient contract funds");

        _burn(msg.sender, amount);
        totalBurned += amount;
        payable(msg.sender).transfer(payout); // Debit card proxyâ€”$0.50 ETH
        emit TokensBoughtBack(msg.sender, amount, payout);
    }

    // Update reserve (admin adds coins from profits)
    function updateReserve(uint256 newCoins) external onlyRole(ADMIN_ROLE) {
        kennedyHalfDollarReserve += newCoins;
        emit ReserveUpdated(kennedyHalfDollarReserve);
    }

    // Mint new tokens (if reserve allows)
    function mint(address to, uint256 amount) external onlyRole(MINTER_ROLE) {
        require(kennedyHalfDollarReserve >= totalSupply() / 10**18 + amount, "Reserve insufficient");
        _mint(to, amount);
    }

    // Fund contract for buybacks
    function fundBuyback() external payable onlyRole(ADMIN_ROLE) {}
}
